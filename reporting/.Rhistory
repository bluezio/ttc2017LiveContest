settings <- setAxis(settings, "Log2", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, scenario, "-", query, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
title <- paste(view, ", Function: ", concatPhases(phases), sep='')
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Size", "MetricValue")
settings <- setLabels(settings, "Size", "Time (ms)")
settings <- setAxis(settings, "Log2", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, scenario, "-", view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
extension
fileName <- paste(rootPath, scenario, "-", view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
fileName
savePlot(subData2, settings, phases, fileName)
results = subData2
phases <- unlist(phases)
first <- TRUE
for(phase in phases){
if (first == TRUE){
merged <- subset(results, PhaseName == phase) # selection on phase
first <- FALSE
}
else{
merged <- rbind(merged, subset(results, PhaseName == phase)) # merge back
}
}
nrow(merged) == 0
settings@xDimension == "ChangeSet"
settings@xDimension
title <- paste(view, ", Function: ", concatPhases(phases), sep='')
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "ChangeSet", "MetricValue")
settings <- setLabels(settings, "ChangeSet", "Time (ms)")
settings <- setAxis(settings, "Log2", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, scenario, "-", view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
settings@xDimension
data <- ddply(merged, c("ChangeSet", "View", "Tool", "RunIndex", "MetricName"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("ChangeSet", "View", "Tool", "MetricName"),
summarize, MetricValue=mean(MetricValue))
artifacts <- unique(data[[settings@xDimension]])
minValue <- min(data$MetricValue)
maxValue <- max(data$MetricValue)
xLabels <- c(artifacts)
plot <- ggplot(data,aes_string(x = settings@xDimension, y = settings@yDimension)) +
geom_line(aes_string(group = settings@group, colour=settings@group), size=lineSize) +
geom_point(aes_string(shape = settings@group, colour=settings@group), size=pointSize) +
scale_shape_manual(values=1:nlevels(data[[settings@group]])) +
ylab(settings@yLabel) +
xlab(settings@xLabel) +
ggtitle(label = settings@title) +
bwTheme
settings@xAxis
title <- paste(view, ", Function: ", concatPhases(phases), sep='')
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "ChangeSet", "MetricValue")
settings <- setLabels(settings, "ChangeSet", "Time (ms)")
settings <- setAxis(settings, "Continuous", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, scenario, "-", view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
title <- paste(view, ", Function: ", concatPhases(phases), sep='')
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "ChangeSet", "MetricValue")
settings <- setLabels(settings, "ChangeSet", "Time (ms)")
for (extension in config$Extension){
fileName <- paste(rootPath, scenario, "-", view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
title <- paste(view, ", Function: ", concatPhases(phases), sep='')
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "ChangeSet", "MetricValue")
settings <- setLabels(settings, "ChangeSet", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, scenario, "-", view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
scenario
setwd("D:/Projekte/TTC 2017/LiveContest/reporting")
configPath = "D:/Projekte/TTC 2017/LiveContest/config/reporting.json"
library("jsonlite", quietly=T, verbose=F, warn.conflicts=FALSE)
library("ggplot2",quietly=T, verbose=F, warn.conflicts=FALSE)
library("plyr", quietly=T, verbose=F, warn.conflicts=FALSE)
source("functions.R")
source("plot.R")
source("constants.R")
results <-read.csv2(resultsPath, header=TRUE, row.names = NULL)
resultsPath
config <- fromJSON(configPath)
if (config$Dimensions$Groups$Tool){
metric <- "Time"
subData1 <- subset(results, MetricName == metric)
subData1$MetricValue <- subData1$MetricValue * (10**-6)
uniqueViews <- unique(subData1$View)
settings <- setGroup(settings, "Tool")
for(view in uniqueViews){
subData2 <- subset(subData1, View==view)
if (config$Dimensions$X_Dimensions$ChangeSet){
title <- paste(view, ", Function: ", concatPhases(phases), sep='')
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "ChangeSet", "MetricValue")
settings <- setLabels(settings, "ChangeSet", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
write.csv(ddply(subData2, c("Tool", "ChangeSet"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, "-", name, ".csv", sep=''))
}
if (config$Dimensions$X_Dimensions$Iteration){
uniqueSizes <-unique(subData2$ChangeSet)
settings <- setDimensions(settings, "Iteration", "MetricValue")
settings <- setLabels(settings, "Iterations", "Time (ms)")
settings <- setAxis(settings, "Continuous", yAxis)
for(size in uniqueSizes){
subData3 <- subset(subData2, ChangeSet==size)
title <- paste(view, ", ChangeSet: ", size, ", Function:  ", concatPhases(phases), sep='')
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-ChangeSet-", size, "-GroupBy-Tool-", metric, "-", name, ".", extension, sep='')
settings <- setTitle(settings, title)
savePlot(subData3, settings, phases, fileName)
}
write.csv(subData3, file = paste(rootPath, view, "-ChangeSet-", size, "-GroupBy-Tool-", metric, "-", name, ".csv", sep=''))
}
}
}
}
metric <- "Time"
subData1 <- subset(results, MetricName == metric)
subData1$MetricValue <- subData1$MetricValue * (10**-6)
if (config$Dimensions$Groups$Tool){
metric <- "Time"
subData1 <- subset(results, MetricName == metric)
subData1$MetricValue <- subData1$MetricValue * (10**-6)
uniqueViews <- unique(subData1$Transformation)
settings <- setGroup(settings, "Tool")
for(view in uniqueViews){
subData2 <- subset(subData1, Transformation==view)
if (config$Dimensions$X_Dimensions$Model){
title <- view
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
write.csv(ddply(subData2, c("Tool", "Model"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, "-", name, ".csv", sep=''))
}
}
}
metric <- "Time"
subData1 <- subset(results, MetricName == metric)
subData1$MetricValue <- subData1$MetricValue * (10**-6)
uniqueViews <- unique(subData1$Transformation)
settings <- setGroup(settings, "Tool")
settings <- PlotSettings()
settings <- setGroup(settings, "Tool")
for(view in uniqueViews){
subData2 <- subset(subData1, Transformation==view)
if (config$Dimensions$X_Dimensions$Model){
title <- view
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, "-", name, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
write.csv(ddply(subData2, c("Tool", "Model"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, "-", name, ".csv", sep=''))
}
}
if (config$Dimensions$Groups$Tool){
metric <- "Time"
subData1 <- subset(results, MetricName == metric)
subData1$MetricValue <- subData1$MetricValue * (10**-6)
uniqueViews <- unique(subData1$Transformation)
settings <- setGroup(settings, "Tool")
for(view in uniqueViews){
subData2 <- subset(subData1, Transformation==view)
if (config$Dimensions$X_Dimensions$Model){
title <- view
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
write.csv(ddply(subData2, c("Tool", "Model"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, ".csv", sep=''))
}
}
}
uniqueViews
view=uniqueViews[0]
view
subData2 <- subset(subData1, Transformation==view)
subData2
subData1
subData1$Transformation
subData1$Transformation == view
subData2
subData2 <- subset(subData1, Transformation=="A")
subData2
view
character(view)
as.character(view)
uniqueViews
uniqueViews[1]
view = uniqueViews[1]
subData2 <- subset(subData1, Transformation==view)
subData2
config$Dimensions$X_Dimensions$Model
if (config$Dimensions$X_Dimensions$Model){
title <- view
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
write.csv(ddply(subData2, c("Tool", "Model"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, ".csv", sep=''))
}
as.character(view)
title <- paste("Code Generator ", view)
title
if (config$Dimensions$X_Dimensions$Model){
title <- paste("Code Generator", view)
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, ".", extension, sep='')
savePlot(subData2, settings, phases, fileName)
}
write.csv(ddply(subData2, c("Tool", "Model"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, ".csv", sep=''))
}
source("theme.R")
savePlot <-function(results, settings, fileName){
merged = results
if (settings@xDimension == "ChangeSet"){
# summarise the iterations
data <- ddply(merged, c("ChangeSet", "View", "Tool", "RunIndex", "MetricName"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("ChangeSet", "View", "Tool", "MetricName"),
summarize, MetricValue=mean(MetricValue))
}
else if(settings@xDimension == "Iteration"){
data <- ddply(merged, c("View", "Tool", "ChangeSet", "RunIndex", "MetricName", "Iteration"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("View", "Tool", "ChangeSet", "MetricName", "Iteration"),
summarize, MetricValue=median(MetricValue))
}
else {
return()
}
artifacts <- unique(data[[settings@xDimension]])
minValue <- min(data$MetricValue)
maxValue <- max(data$MetricValue)
xLabels <- c(artifacts)
plot <- ggplot(data,aes_string(x = settings@xDimension, y = settings@yDimension)) +
geom_line(aes_string(group = settings@group, colour=settings@group), size=lineSize) +
geom_point(aes_string(shape = settings@group, colour=settings@group), size=pointSize) +
scale_shape_manual(values=1:nlevels(data[[settings@group]])) +
ylab(settings@yLabel) +
xlab(settings@xLabel) +
ggtitle(label = settings@title) +
bwTheme
if (settings@xAxis == "Continuous"){
plot <- plot + scale_x_continuous(breaks = c(artifacts))
}
else if (settings@xAxis == "Log2"){
plot <- plot + scale_x_log10(breaks = c(artifacts), labels = xLabels)
}
if (minValue == 0){
print("The minimum metricvalue equals with 0. The plot cannot be generated.")
return()
}
if (settings@yAxis == "Continuous"){
plot <- plot + scale_y_continuous(breaks = seq(minValue, maxValue, by=round(maxValue/5,0)),
labels = seq(minValue, maxValue, by=round(maxValue/5,0)))
}
else if (settings@yAxis == "Log10"){
plot <- plot + scale_y_log10(breaks = 10^seq(round(log10(minValue)), round(log10(maxValue)), by=1),
labels = 10^seq(round(log10(minValue)), round(log10(maxValue)), by=1))
}
ggsave(plot,filename = fileName, width=10, height=5, dpi=192)
print(fileName)
}
createFolders <- function(rootPath, subFolders){
if (file.exists(rootPath) == FALSE){
dir.create(rootPath)
}
for (folder in subFolders){
path <- paste(rootPath, folder, sep='')
if (file.exists(path) == FALSE){
dir.create(path)
}
}
}
getXLabels <- function(artifacts){
ticks <- c()
for(size in artifacts){
ticks <- c(ticks, labels[[as.character(size)]])
}
return(ticks)
}
library("jsonlite", quietly=T, verbose=F, warn.conflicts=FALSE)
library("ggplot2",quietly=T, verbose=F, warn.conflicts=FALSE)
library("plyr", quietly=T, verbose=F, warn.conflicts=FALSE)
source("functions.R")
source("plot.R")
source("constants.R")
args <- commandArgs(trailingOnly = TRUE)
configPath <- args[1]
results <-read.csv2(resultsPath, header=TRUE, row.names = NULL)
config <- fromJSON(configPath)
index <- 0
settings <- PlotSettings()
uniqueScenarios <- unique(results$Model)
if (config$Dimensions$Groups$Tool){
metric <- "Time"
subData1 <- subset(results, MetricName == metric)
subData1$MetricValue <- subData1$MetricValue * (10**-6)
uniqueViews <- unique(subData1$Transformation)
settings <- setGroup(settings, "Tool")
for(view in uniqueViews){
subData2 <- subset(subData1, Transformation==view)
if (config$Dimensions$X_Dimensions$Model){
title <- paste("Code Generator", view)
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, ".", extension, sep='')
savePlot(subData2, settings, fileName)
}
write.csv(ddply(subData2, c("Tool", "Model"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, ".csv", sep=''))
}
}
}
configPath
configPath = "../config/reporting.json"
config <- fromJSON(configPath)
index <- 0
settings <- PlotSettings()
uniqueScenarios <- unique(results$Model)
if (config$Dimensions$Groups$Tool){
metric <- "Time"
subData1 <- subset(results, MetricName == metric)
subData1$MetricValue <- subData1$MetricValue * (10**-6)
uniqueViews <- unique(subData1$Transformation)
settings <- setGroup(settings, "Tool")
for(view in uniqueViews){
subData2 <- subset(subData1, Transformation==view)
if (config$Dimensions$X_Dimensions$Model){
title <- paste("Code Generator", view)
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
for (extension in config$Extension){
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, ".", extension, sep='')
savePlot(subData2, settings, fileName)
}
write.csv(ddply(subData2, c("Tool", "Model"), summarise, N=length(MetricValue), mean=mean(MetricValue), sd=sd(MetricValue)), file = paste(rootPath, view, "-GroupBy-Tool-",metric, ".csv", sep=''))
}
}
}
subData2
settings
fileName
view
view = "A"
subData2 <- subset(subData1, Transformation==view)
title <- paste("Code Generator", view)
settings <- setTitle(settings, title)
settings <- setDimensions(settings, "Model", "MetricValue")
settings <- setLabels(settings, "Model", "Time (ms)")
settings <- setAxis(settings, "Discrete", yAxis)
config$Extension
extension = "pdf"
fileName <- paste(rootPath, view, "-GroupBy-Tool-",metric, ".", extension, sep='')
fileName
results = subData2
merged = results
settings@xDimension
if (settings@xDimension == "Model"){
# summarise the iterations
data <- ddply(merged, c("Model", "Transformation", "Tool", "RunIndex", "MetricName"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("Model", "Transformation", "Tool", "MetricName"),
summarize, MetricValue=mean(MetricValue))
}
else if(settings@xDimension == "Iteration"){
data <- ddply(merged, c("Transformation", "Tool", "Model", "RunIndex", "MetricName", "Iteration"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("Transformation", "Tool", "Model", "MetricName", "Iteration"),
summarize, MetricValue=median(MetricValue))
}
data <- ddply(merged, c("Model", "Transformation", "Tool", "RunIndex", "MetricName"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("Model", "Transformation", "Tool", "MetricName"),
summarize, MetricValue=mean(MetricValue))
artifacts <- unique(data[[settings@xDimension]])
minValue <- min(data$MetricValue)
maxValue <- max(data$MetricValue)
xLabels <- c(artifacts)
plot <- ggplot(data,aes_string(x = settings@xDimension, y = settings@yDimension)) +
geom_line(aes_string(group = settings@group, colour=settings@group), size=lineSize) +
geom_point(aes_string(shape = settings@group, colour=settings@group), size=pointSize) +
scale_shape_manual(values=1:nlevels(data[[settings@group]])) +
ylab(settings@yLabel) +
xlab(settings@xLabel) +
ggtitle(label = settings@title) +
bwTheme
if (settings@xAxis == "Continuous"){
plot <- plot + scale_x_continuous(breaks = c(artifacts))
}
else if (settings@xAxis == "Log2"){
plot <- plot + scale_x_log10(breaks = c(artifacts), labels = xLabels)
}
settings@xAxis
minValue
ggsave(plot,filename = fileName, width=10, height=5, dpi=192)
print(fileName)
source("theme.R")
savePlot <-function(results, settings, fileName){
merged = results
if (settings@xDimension == "Model"){
# summarise the iterations
data <- ddply(merged, c("Model", "Transformation", "Tool", "RunIndex", "MetricName"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("Model", "Transformation", "Tool", "MetricName"),
summarize, MetricValue=mean(MetricValue))
}
else if(settings@xDimension == "Iteration"){
data <- ddply(merged, c("Transformation", "Tool", "Model", "RunIndex", "MetricName", "Iteration"),
summarize, MetricValue=sum(MetricValue))
data <- ddply(data, c("Transformation", "Tool", "Model", "MetricName", "Iteration"),
summarize, MetricValue=median(MetricValue))
}
else {
return()
}
artifacts <- unique(data[[settings@xDimension]])
minValue <- min(data$MetricValue)
maxValue <- max(data$MetricValue)
xLabels <- c(artifacts)
plot <- ggplot(data,aes_string(x = settings@xDimension, y = settings@yDimension)) +
geom_line(aes_string(group = settings@group, colour=settings@group), size=lineSize) +
geom_point(aes_string(shape = settings@group, colour=settings@group), size=pointSize) +
scale_shape_manual(values=1:nlevels(data[[settings@group]])) +
ylab(settings@yLabel) +
xlab(settings@xLabel) +
ggtitle(label = settings@title) +
bwTheme
if (settings@xAxis == "Continuous"){
plot <- plot + scale_x_continuous(breaks = c(artifacts))
}
else if (settings@xAxis == "Log2"){
plot <- plot + scale_x_log10(breaks = c(artifacts), labels = xLabels)
}
if (minValue == 0){
print("The minimum metricvalue equals with 0. The plot cannot be generated.")
return()
}
if (settings@yAxis == "Continuous"){
plot <- plot + scale_y_continuous(breaks = seq(minValue, maxValue, by=round(maxValue/5,0)),
labels = seq(minValue, maxValue, by=round(maxValue/5,0)))
}
else if (settings@yAxis == "Log10"){
plot <- plot + scale_y_log10(breaks = 10^seq(round(log10(minValue)), round(log10(maxValue)), by=1),
labels = 10^seq(round(log10(minValue)), round(log10(maxValue)), by=1))
}
ggsave(plot,filename = fileName, width=10, height=5, dpi=192)
print(fileName)
}
createFolders <- function(rootPath, subFolders){
if (file.exists(rootPath) == FALSE){
dir.create(rootPath)
}
for (folder in subFolders){
path <- paste(rootPath, folder, sep='')
if (file.exists(path) == FALSE){
dir.create(path)
}
}
}
getXLabels <- function(artifacts){
ticks <- c()
for(size in artifacts){
ticks <- c(ticks, labels[[as.character(size)]])
}
return(ticks)
}

//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.LiveContest.SimpleCodeDOM
{
    
    
    /// <summary>
    /// The default implementation of the ConditionalExpression class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM")]
    [XmlNamespacePrefixAttribute("codeDom")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Condit" +
        "ionalExpression")]
    public partial class ConditionalExpression : Expression, IConditionalExpression, IModelElement
    {
        
        private static Lazy<ITypedElement> _testReference = new Lazy<ITypedElement>(RetrieveTestReference);
        
        /// <summary>
        /// The backing field for the Test property
        /// </summary>
        private IExpression _test;
        
        private static Lazy<ITypedElement> _trueExpressionReference = new Lazy<ITypedElement>(RetrieveTrueExpressionReference);
        
        /// <summary>
        /// The backing field for the TrueExpression property
        /// </summary>
        private IExpression _trueExpression;
        
        private static Lazy<ITypedElement> _falseExpressionReference = new Lazy<ITypedElement>(RetrieveFalseExpressionReference);
        
        /// <summary>
        /// The backing field for the FalseExpression property
        /// </summary>
        private IExpression _falseExpression;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The Test property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression Test
        {
            get
            {
                return this._test;
            }
            set
            {
                if ((this._test != value))
                {
                    IExpression old = this._test;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTestChanging(e);
                    this.OnPropertyChanging("Test", e, _testReference);
                    this._test = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetTest;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTest;
                    }
                    this.OnTestChanged(e);
                    this.OnPropertyChanged("Test", e, _testReference);
                }
            }
        }
        
        /// <summary>
        /// The TrueExpression property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression TrueExpression
        {
            get
            {
                return this._trueExpression;
            }
            set
            {
                if ((this._trueExpression != value))
                {
                    IExpression old = this._trueExpression;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrueExpressionChanging(e);
                    this.OnPropertyChanging("TrueExpression", e, _trueExpressionReference);
                    this._trueExpression = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetTrueExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTrueExpression;
                    }
                    this.OnTrueExpressionChanged(e);
                    this.OnPropertyChanged("TrueExpression", e, _trueExpressionReference);
                }
            }
        }
        
        /// <summary>
        /// The FalseExpression property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression FalseExpression
        {
            get
            {
                return this._falseExpression;
            }
            set
            {
                if ((this._falseExpression != value))
                {
                    IExpression old = this._falseExpression;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFalseExpressionChanging(e);
                    this.OnPropertyChanging("FalseExpression", e, _falseExpressionReference);
                    this._falseExpression = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetFalseExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetFalseExpression;
                    }
                    this.OnFalseExpressionChanged(e);
                    this.OnPropertyChanged("FalseExpression", e, _falseExpressionReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ConditionalExpressionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConditionalExpressionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Condit" +
                            "ionalExpression")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Test property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestChanging;
        
        /// <summary>
        /// Gets fired when the Test property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestChanged;
        
        /// <summary>
        /// Gets fired before the TrueExpression property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrueExpressionChanging;
        
        /// <summary>
        /// Gets fired when the TrueExpression property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrueExpressionChanged;
        
        /// <summary>
        /// Gets fired before the FalseExpression property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FalseExpressionChanging;
        
        /// <summary>
        /// Gets fired when the FalseExpression property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FalseExpressionChanged;
        
        private static ITypedElement RetrieveTestReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.ConditionalExpression.ClassInstance)).Resolve("Test")));
        }
        
        /// <summary>
        /// Raises the TestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Test property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTest(object sender, System.EventArgs eventArgs)
        {
            this.Test = null;
        }
        
        private static ITypedElement RetrieveTrueExpressionReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.ConditionalExpression.ClassInstance)).Resolve("TrueExpression")));
        }
        
        /// <summary>
        /// Raises the TrueExpressionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrueExpressionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrueExpressionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrueExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrueExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrueExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TrueExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTrueExpression(object sender, System.EventArgs eventArgs)
        {
            this.TrueExpression = null;
        }
        
        private static ITypedElement RetrieveFalseExpressionReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.ConditionalExpression.ClassInstance)).Resolve("FalseExpression")));
        }
        
        /// <summary>
        /// Raises the FalseExpressionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFalseExpressionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FalseExpressionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FalseExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFalseExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FalseExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FalseExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFalseExpression(object sender, System.EventArgs eventArgs)
        {
            this.FalseExpression = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Test))
            {
                return ModelHelper.CreatePath("Test");
            }
            if ((element == this.TrueExpression))
            {
                return ModelHelper.CreatePath("TrueExpression");
            }
            if ((element == this.FalseExpression))
            {
                return ModelHelper.CreatePath("FalseExpression");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "TEST"))
            {
                return this.Test;
            }
            if ((reference == "TRUEEXPRESSION"))
            {
                return this.TrueExpression;
            }
            if ((reference == "FALSEEXPRESSION"))
            {
                return this.FalseExpression;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TEST"))
            {
                this.Test = ((IExpression)(value));
                return;
            }
            if ((feature == "TRUEEXPRESSION"))
            {
                this.TrueExpression = ((IExpression)(value));
                return;
            }
            if ((feature == "FALSEEXPRESSION"))
            {
                this.FalseExpression = ((IExpression)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Test"))
            {
                return new TestProxy(this);
            }
            if ((attribute == "TrueExpression"))
            {
                return new TrueExpressionProxy(this);
            }
            if ((attribute == "FalseExpression"))
            {
                return new FalseExpressionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Test"))
            {
                return new TestProxy(this);
            }
            if ((reference == "TrueExpression"))
            {
                return new TrueExpressionProxy(this);
            }
            if ((reference == "FalseExpression"))
            {
                return new FalseExpressionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Condit" +
                        "ionalExpression")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConditionalExpression class
        /// </summary>
        public class ConditionalExpressionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConditionalExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConditionalExpressionChildrenCollection(ConditionalExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Test != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TrueExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FalseExpression != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TestChanged += this.PropagateValueChanges;
                this._parent.TrueExpressionChanged += this.PropagateValueChanges;
                this._parent.FalseExpressionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TestChanged -= this.PropagateValueChanges;
                this._parent.TrueExpressionChanged -= this.PropagateValueChanges;
                this._parent.FalseExpressionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Test == null))
                {
                    IExpression testCasted = item.As<IExpression>();
                    if ((testCasted != null))
                    {
                        this._parent.Test = testCasted;
                        return;
                    }
                }
                if ((this._parent.TrueExpression == null))
                {
                    IExpression trueExpressionCasted = item.As<IExpression>();
                    if ((trueExpressionCasted != null))
                    {
                        this._parent.TrueExpression = trueExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.FalseExpression == null))
                {
                    IExpression falseExpressionCasted = item.As<IExpression>();
                    if ((falseExpressionCasted != null))
                    {
                        this._parent.FalseExpression = falseExpressionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Test = null;
                this._parent.TrueExpression = null;
                this._parent.FalseExpression = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Test))
                {
                    return true;
                }
                if ((item == this._parent.TrueExpression))
                {
                    return true;
                }
                if ((item == this._parent.FalseExpression))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Test != null))
                {
                    array[arrayIndex] = this._parent.Test;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TrueExpression != null))
                {
                    array[arrayIndex] = this._parent.TrueExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FalseExpression != null))
                {
                    array[arrayIndex] = this._parent.FalseExpression;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Test == item))
                {
                    this._parent.Test = null;
                    return true;
                }
                if ((this._parent.TrueExpression == item))
                {
                    this._parent.TrueExpression = null;
                    return true;
                }
                if ((this._parent.FalseExpression == item))
                {
                    this._parent.FalseExpression = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Test).Concat(this._parent.TrueExpression).Concat(this._parent.FalseExpression).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConditionalExpression class
        /// </summary>
        public class ConditionalExpressionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConditionalExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConditionalExpressionReferencedElementsCollection(ConditionalExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Test != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TrueExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FalseExpression != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TestChanged += this.PropagateValueChanges;
                this._parent.TrueExpressionChanged += this.PropagateValueChanges;
                this._parent.FalseExpressionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TestChanged -= this.PropagateValueChanges;
                this._parent.TrueExpressionChanged -= this.PropagateValueChanges;
                this._parent.FalseExpressionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Test == null))
                {
                    IExpression testCasted = item.As<IExpression>();
                    if ((testCasted != null))
                    {
                        this._parent.Test = testCasted;
                        return;
                    }
                }
                if ((this._parent.TrueExpression == null))
                {
                    IExpression trueExpressionCasted = item.As<IExpression>();
                    if ((trueExpressionCasted != null))
                    {
                        this._parent.TrueExpression = trueExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.FalseExpression == null))
                {
                    IExpression falseExpressionCasted = item.As<IExpression>();
                    if ((falseExpressionCasted != null))
                    {
                        this._parent.FalseExpression = falseExpressionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Test = null;
                this._parent.TrueExpression = null;
                this._parent.FalseExpression = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Test))
                {
                    return true;
                }
                if ((item == this._parent.TrueExpression))
                {
                    return true;
                }
                if ((item == this._parent.FalseExpression))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Test != null))
                {
                    array[arrayIndex] = this._parent.Test;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TrueExpression != null))
                {
                    array[arrayIndex] = this._parent.TrueExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FalseExpression != null))
                {
                    array[arrayIndex] = this._parent.FalseExpression;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Test == item))
                {
                    this._parent.Test = null;
                    return true;
                }
                if ((this._parent.TrueExpression == item))
                {
                    this._parent.TrueExpression = null;
                    return true;
                }
                if ((this._parent.FalseExpression == item))
                {
                    this._parent.FalseExpression = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Test).Concat(this._parent.TrueExpression).Concat(this._parent.FalseExpression).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Test property
        /// </summary>
        private sealed class TestProxy : ModelPropertyChange<IConditionalExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TestProxy(IConditionalExpression modelElement) : 
                    base(modelElement, "Test")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.Test;
                }
                set
                {
                    this.ModelElement.Test = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TrueExpression property
        /// </summary>
        private sealed class TrueExpressionProxy : ModelPropertyChange<IConditionalExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrueExpressionProxy(IConditionalExpression modelElement) : 
                    base(modelElement, "TrueExpression")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.TrueExpression;
                }
                set
                {
                    this.ModelElement.TrueExpression = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FalseExpression property
        /// </summary>
        private sealed class FalseExpressionProxy : ModelPropertyChange<IConditionalExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FalseExpressionProxy(IConditionalExpression modelElement) : 
                    base(modelElement, "FalseExpression")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.FalseExpression;
                }
                set
                {
                    this.ModelElement.FalseExpression = value;
                }
            }
        }
    }
}


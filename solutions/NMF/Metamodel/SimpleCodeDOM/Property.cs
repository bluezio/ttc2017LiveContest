//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.LiveContest.SimpleCodeDOM
{
    
    
    /// <summary>
    /// The default implementation of the Property class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM")]
    [XmlNamespacePrefixAttribute("codeDom")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Proper" +
        "ty")]
    [DebuggerDisplayAttribute("Property {Name}")]
    public partial class Property : Member, IProperty, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        private bool _isAbstract;
        
        private static Lazy<ITypedElement> _isAbstractAttribute = new Lazy<ITypedElement>(RetrieveIsAbstractAttribute);
        
        private static Lazy<ITypedElement> _propertyTypeReference = new Lazy<ITypedElement>(RetrievePropertyTypeReference);
        
        /// <summary>
        /// The backing field for the PropertyType property
        /// </summary>
        private ITypeReference _propertyType;
        
        private static Lazy<ITypedElement> _getterReference = new Lazy<ITypedElement>(RetrieveGetterReference);
        
        /// <summary>
        /// The backing field for the Getter property
        /// </summary>
        private IExpression _getter;
        
        private static Lazy<ITypedElement> _setterReference = new Lazy<ITypedElement>(RetrieveSetterReference);
        
        /// <summary>
        /// The backing field for the Setter property
        /// </summary>
        private IExpression _setter;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAbstractChanging(e);
                    this.OnPropertyChanging("IsAbstract", e, _isAbstractAttribute);
                    this._isAbstract = value;
                    this.OnIsAbstractChanged(e);
                    this.OnPropertyChanged("IsAbstract", e, _isAbstractAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PropertyType property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ITypeReference PropertyType
        {
            get
            {
                return this._propertyType;
            }
            set
            {
                if ((this._propertyType != value))
                {
                    ITypeReference old = this._propertyType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyTypeChanging(e);
                    this.OnPropertyChanging("PropertyType", e, _propertyTypeReference);
                    this._propertyType = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetPropertyType;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetPropertyType;
                    }
                    this.OnPropertyTypeChanged(e);
                    this.OnPropertyChanged("PropertyType", e, _propertyTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The Getter property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression Getter
        {
            get
            {
                return this._getter;
            }
            set
            {
                if ((this._getter != value))
                {
                    IExpression old = this._getter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGetterChanging(e);
                    this.OnPropertyChanging("Getter", e, _getterReference);
                    this._getter = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetGetter;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetGetter;
                    }
                    this.OnGetterChanged(e);
                    this.OnPropertyChanged("Getter", e, _getterReference);
                }
            }
        }
        
        /// <summary>
        /// The Setter property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression Setter
        {
            get
            {
                return this._setter;
            }
            set
            {
                if ((this._setter != value))
                {
                    IExpression old = this._setter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetterChanging(e);
                    this.OnPropertyChanging("Setter", e, _setterReference);
                    this._setter = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetSetter;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetSetter;
                    }
                    this.OnSetterChanged(e);
                    this.OnPropertyChanged("Setter", e, _setterReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PropertyChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PropertyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Proper" +
                            "ty")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsAbstract property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanging;
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired before the PropertyType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyTypeChanging;
        
        /// <summary>
        /// Gets fired when the PropertyType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyTypeChanged;
        
        /// <summary>
        /// Gets fired before the Getter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GetterChanging;
        
        /// <summary>
        /// Gets fired when the Getter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GetterChanged;
        
        /// <summary>
        /// Gets fired before the Setter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetterChanging;
        
        /// <summary>
        /// Gets fired when the Setter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetterChanged;
        
        private static ITypedElement RetrieveIsAbstractAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Property.ClassInstance)).Resolve("IsAbstract")));
        }
        
        /// <summary>
        /// Raises the IsAbstractChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAbstractChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePropertyTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Property.ClassInstance)).Resolve("PropertyType")));
        }
        
        /// <summary>
        /// Raises the PropertyTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PropertyTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PropertyType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPropertyType(object sender, System.EventArgs eventArgs)
        {
            this.PropertyType = null;
        }
        
        private static ITypedElement RetrieveGetterReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Property.ClassInstance)).Resolve("Getter")));
        }
        
        /// <summary>
        /// Raises the GetterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGetterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GetterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GetterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGetterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GetterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Getter property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGetter(object sender, System.EventArgs eventArgs)
        {
            this.Getter = null;
        }
        
        private static ITypedElement RetrieveSetterReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Property.ClassInstance)).Resolve("Setter")));
        }
        
        /// <summary>
        /// Raises the SetterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Setter property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetter(object sender, System.EventArgs eventArgs)
        {
            this.Setter = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.PropertyType))
            {
                return ModelHelper.CreatePath("PropertyType");
            }
            if ((element == this.Getter))
            {
                return ModelHelper.CreatePath("Getter");
            }
            if ((element == this.Setter))
            {
                return ModelHelper.CreatePath("Setter");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PROPERTYTYPE"))
            {
                return this.PropertyType;
            }
            if ((reference == "GETTER"))
            {
                return this.Getter;
            }
            if ((reference == "SETTER"))
            {
                return this.Setter;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROPERTYTYPE"))
            {
                this.PropertyType = ((ITypeReference)(value));
                return;
            }
            if ((feature == "GETTER"))
            {
                this.Getter = ((IExpression)(value));
                return;
            }
            if ((feature == "SETTER"))
            {
                this.Setter = ((IExpression)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PropertyType"))
            {
                return new PropertyTypeProxy(this);
            }
            if ((attribute == "Getter"))
            {
                return new GetterProxy(this);
            }
            if ((attribute == "Setter"))
            {
                return new SetterProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PropertyType"))
            {
                return new PropertyTypeProxy(this);
            }
            if ((reference == "Getter"))
            {
                return new GetterProxy(this);
            }
            if ((reference == "Setter"))
            {
                return new SetterProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Proper" +
                        "ty")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Property class
        /// </summary>
        public class PropertyChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Property _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyChildrenCollection(Property parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PropertyType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Getter != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Setter != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PropertyTypeChanged += this.PropagateValueChanges;
                this._parent.GetterChanged += this.PropagateValueChanges;
                this._parent.SetterChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PropertyTypeChanged -= this.PropagateValueChanges;
                this._parent.GetterChanged -= this.PropagateValueChanges;
                this._parent.SetterChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PropertyType == null))
                {
                    ITypeReference propertyTypeCasted = item.As<ITypeReference>();
                    if ((propertyTypeCasted != null))
                    {
                        this._parent.PropertyType = propertyTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Getter == null))
                {
                    IExpression getterCasted = item.As<IExpression>();
                    if ((getterCasted != null))
                    {
                        this._parent.Getter = getterCasted;
                        return;
                    }
                }
                if ((this._parent.Setter == null))
                {
                    IExpression setterCasted = item.As<IExpression>();
                    if ((setterCasted != null))
                    {
                        this._parent.Setter = setterCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PropertyType = null;
                this._parent.Getter = null;
                this._parent.Setter = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PropertyType))
                {
                    return true;
                }
                if ((item == this._parent.Getter))
                {
                    return true;
                }
                if ((item == this._parent.Setter))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PropertyType != null))
                {
                    array[arrayIndex] = this._parent.PropertyType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Getter != null))
                {
                    array[arrayIndex] = this._parent.Getter;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Setter != null))
                {
                    array[arrayIndex] = this._parent.Setter;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PropertyType == item))
                {
                    this._parent.PropertyType = null;
                    return true;
                }
                if ((this._parent.Getter == item))
                {
                    this._parent.Getter = null;
                    return true;
                }
                if ((this._parent.Setter == item))
                {
                    this._parent.Setter = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PropertyType).Concat(this._parent.Getter).Concat(this._parent.Setter).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Property class
        /// </summary>
        public class PropertyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Property _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyReferencedElementsCollection(Property parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PropertyType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Getter != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Setter != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PropertyTypeChanged += this.PropagateValueChanges;
                this._parent.GetterChanged += this.PropagateValueChanges;
                this._parent.SetterChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PropertyTypeChanged -= this.PropagateValueChanges;
                this._parent.GetterChanged -= this.PropagateValueChanges;
                this._parent.SetterChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PropertyType == null))
                {
                    ITypeReference propertyTypeCasted = item.As<ITypeReference>();
                    if ((propertyTypeCasted != null))
                    {
                        this._parent.PropertyType = propertyTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Getter == null))
                {
                    IExpression getterCasted = item.As<IExpression>();
                    if ((getterCasted != null))
                    {
                        this._parent.Getter = getterCasted;
                        return;
                    }
                }
                if ((this._parent.Setter == null))
                {
                    IExpression setterCasted = item.As<IExpression>();
                    if ((setterCasted != null))
                    {
                        this._parent.Setter = setterCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PropertyType = null;
                this._parent.Getter = null;
                this._parent.Setter = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PropertyType))
                {
                    return true;
                }
                if ((item == this._parent.Getter))
                {
                    return true;
                }
                if ((item == this._parent.Setter))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PropertyType != null))
                {
                    array[arrayIndex] = this._parent.PropertyType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Getter != null))
                {
                    array[arrayIndex] = this._parent.Getter;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Setter != null))
                {
                    array[arrayIndex] = this._parent.Setter;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PropertyType == item))
                {
                    this._parent.PropertyType = null;
                    return true;
                }
                if ((this._parent.Getter == item))
                {
                    this._parent.Getter = null;
                    return true;
                }
                if ((this._parent.Setter == item))
                {
                    this._parent.Setter = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PropertyType).Concat(this._parent.Getter).Concat(this._parent.Setter).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IProperty, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IProperty modelElement) : 
                    base(modelElement, "IsAbstract")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PropertyType property
        /// </summary>
        private sealed class PropertyTypeProxy : ModelPropertyChange<IProperty, ITypeReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PropertyTypeProxy(IProperty modelElement) : 
                    base(modelElement, "PropertyType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeReference Value
            {
                get
                {
                    return this.ModelElement.PropertyType;
                }
                set
                {
                    this.ModelElement.PropertyType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Getter property
        /// </summary>
        private sealed class GetterProxy : ModelPropertyChange<IProperty, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GetterProxy(IProperty modelElement) : 
                    base(modelElement, "Getter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.Getter;
                }
                set
                {
                    this.ModelElement.Getter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Setter property
        /// </summary>
        private sealed class SetterProxy : ModelPropertyChange<IProperty, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetterProxy(IProperty modelElement) : 
                    base(modelElement, "Setter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.Setter;
                }
                set
                {
                    this.ModelElement.Setter = value;
                }
            }
        }
    }
}


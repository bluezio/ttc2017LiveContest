//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.LiveContest.SimpleCodeDOM
{
    
    
    /// <summary>
    /// The default implementation of the Class class
    /// </summary>
    [XmlIdentifierAttribute("Name")]
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM")]
    [XmlNamespacePrefixAttribute("codeDom")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Class")]
    [DebuggerDisplayAttribute("Class {Name}")]
    public partial class Class : ModelElement, IClass, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the IsInterface property
        /// </summary>
        private bool _isInterface;
        
        private static Lazy<ITypedElement> _isInterfaceAttribute = new Lazy<ITypedElement>(RetrieveIsInterfaceAttribute);
        
        private static Lazy<ITypedElement> _membersReference = new Lazy<ITypedElement>(RetrieveMembersReference);
        
        /// <summary>
        /// The backing field for the Members property
        /// </summary>
        private ObservableCompositionOrderedSet<IMember> _members;
        
        private static Lazy<ITypedElement> _baseTypesReference = new Lazy<ITypedElement>(RetrieveBaseTypesReference);
        
        /// <summary>
        /// The backing field for the BaseTypes property
        /// </summary>
        private ObservableCompositionOrderedSet<ITypeReference> _baseTypes;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Class()
        {
            this._members = new ObservableCompositionOrderedSet<IMember>(this);
            this._members.CollectionChanging += this.MembersCollectionChanging;
            this._members.CollectionChanged += this.MembersCollectionChanged;
            this._baseTypes = new ObservableCompositionOrderedSet<ITypeReference>(this);
            this._baseTypes.CollectionChanging += this.BaseTypesCollectionChanging;
            this._baseTypes.CollectionChanged += this.BaseTypesCollectionChanged;
        }
        
        /// <summary>
        /// The Name property
        /// </summary>
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IsInterface property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public bool IsInterface
        {
            get
            {
                return this._isInterface;
            }
            set
            {
                if ((this._isInterface != value))
                {
                    bool old = this._isInterface;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsInterfaceChanging(e);
                    this.OnPropertyChanging("IsInterface", e, _isInterfaceAttribute);
                    this._isInterface = value;
                    this.OnIsInterfaceChanged(e);
                    this.OnPropertyChanged("IsInterface", e, _isInterfaceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Members property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IMember> Members
        {
            get
            {
                return this._members;
            }
        }
        
        /// <summary>
        /// The BaseTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITypeReference> BaseTypes
        {
            get
            {
                return this._baseTypes;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ClassChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Class")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the IsInterface property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsInterfaceChanging;
        
        /// <summary>
        /// Gets fired when the IsInterface property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsInterfaceChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Class.ClassInstance)).Resolve("Name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsInterfaceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Class.ClassInstance)).Resolve("IsInterface")));
        }
        
        /// <summary>
        /// Raises the IsInterfaceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsInterfaceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsInterfaceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsInterfaceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsInterfaceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsInterfaceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMembersReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Class.ClassInstance)).Resolve("Members")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Members property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MembersCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Members", e, _membersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Members property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MembersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Members", e, _membersReference);
        }
        
        private static ITypedElement RetrieveBaseTypesReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Class.ClassInstance)).Resolve("BaseTypes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BaseTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaseTypesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BaseTypes", e, _baseTypesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BaseTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaseTypesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BaseTypes", e, _baseTypesReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int membersIndex = ModelHelper.IndexOfReference(this.Members, element);
            if ((membersIndex != -1))
            {
                return ModelHelper.CreatePath("Members", membersIndex);
            }
            int baseTypesIndex = ModelHelper.IndexOfReference(this.BaseTypes, element);
            if ((baseTypesIndex != -1))
            {
                return ModelHelper.CreatePath("BaseTypes", baseTypesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MEMBERS"))
            {
                if ((index < this.Members.Count))
                {
                    return this.Members[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "BASETYPES"))
            {
                if ((index < this.BaseTypes.Count))
                {
                    return this.BaseTypes[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "ISINTERFACE"))
            {
                return this.IsInterface;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MEMBERS"))
            {
                return this._members;
            }
            if ((feature == "BASETYPES"))
            {
                return this._baseTypes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "ISINTERFACE"))
            {
                this.IsInterface = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._members))
            {
                return "Members";
            }
            if ((container == this._baseTypes))
            {
                return "BaseTypes";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Class")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassChildrenCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Members.Count);
                    count = (count + this._parent.BaseTypes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Members.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BaseTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Members.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BaseTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMember membersCasted = item.As<IMember>();
                if ((membersCasted != null))
                {
                    this._parent.Members.Add(membersCasted);
                }
                ITypeReference baseTypesCasted = item.As<ITypeReference>();
                if ((baseTypesCasted != null))
                {
                    this._parent.BaseTypes.Add(baseTypesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Members.Clear();
                this._parent.BaseTypes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Members.Contains(item))
                {
                    return true;
                }
                if (this._parent.BaseTypes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> membersEnumerator = this._parent.Members.GetEnumerator();
                try
                {
                    for (
                    ; membersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = membersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    membersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> baseTypesEnumerator = this._parent.BaseTypes.GetEnumerator();
                try
                {
                    for (
                    ; baseTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = baseTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    baseTypesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMember memberItem = item.As<IMember>();
                if (((memberItem != null) 
                            && this._parent.Members.Remove(memberItem)))
                {
                    return true;
                }
                ITypeReference typeReferenceItem = item.As<ITypeReference>();
                if (((typeReferenceItem != null) 
                            && this._parent.BaseTypes.Remove(typeReferenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Members).Concat(this._parent.BaseTypes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassReferencedElementsCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Members.Count);
                    count = (count + this._parent.BaseTypes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Members.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BaseTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Members.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BaseTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMember membersCasted = item.As<IMember>();
                if ((membersCasted != null))
                {
                    this._parent.Members.Add(membersCasted);
                }
                ITypeReference baseTypesCasted = item.As<ITypeReference>();
                if ((baseTypesCasted != null))
                {
                    this._parent.BaseTypes.Add(baseTypesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Members.Clear();
                this._parent.BaseTypes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Members.Contains(item))
                {
                    return true;
                }
                if (this._parent.BaseTypes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> membersEnumerator = this._parent.Members.GetEnumerator();
                try
                {
                    for (
                    ; membersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = membersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    membersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> baseTypesEnumerator = this._parent.BaseTypes.GetEnumerator();
                try
                {
                    for (
                    ; baseTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = baseTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    baseTypesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMember memberItem = item.As<IMember>();
                if (((memberItem != null) 
                            && this._parent.Members.Remove(memberItem)))
                {
                    return true;
                }
                ITypeReference typeReferenceItem = item.As<ITypeReference>();
                if (((typeReferenceItem != null) 
                            && this._parent.BaseTypes.Remove(typeReferenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Members).Concat(this._parent.BaseTypes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IClass, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IClass modelElement) : 
                    base(modelElement, "Name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsInterface property
        /// </summary>
        private sealed class IsInterfaceProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsInterfaceProxy(IClass modelElement) : 
                    base(modelElement, "IsInterface")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsInterface;
                }
                set
                {
                    this.ModelElement.IsInterface = value;
                }
            }
        }
    }
}


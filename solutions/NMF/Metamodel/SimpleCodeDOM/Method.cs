//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.LiveContest.SimpleCodeDOM
{
    
    
    /// <summary>
    /// The default implementation of the Method class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM")]
    [XmlNamespacePrefixAttribute("codeDom")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Method" +
        "")]
    [DebuggerDisplayAttribute("Method {Name}")]
    public partial class Method : Member, IMethod, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        private bool _isAbstract;
        
        private static Lazy<ITypedElement> _isAbstractAttribute = new Lazy<ITypedElement>(RetrieveIsAbstractAttribute);
        
        private static Lazy<ITypedElement> _parametersReference = new Lazy<ITypedElement>(RetrieveParametersReference);
        
        /// <summary>
        /// The backing field for the Parameters property
        /// </summary>
        private ObservableCompositionOrderedSet<IParameter> _parameters;
        
        private static Lazy<ITypedElement> _returnTypeReference = new Lazy<ITypedElement>(RetrieveReturnTypeReference);
        
        /// <summary>
        /// The backing field for the ReturnType property
        /// </summary>
        private ITypeReference _returnType;
        
        private static Lazy<ITypedElement> _bodyExpressionReference = new Lazy<ITypedElement>(RetrieveBodyExpressionReference);
        
        /// <summary>
        /// The backing field for the BodyExpression property
        /// </summary>
        private IExpression _bodyExpression;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Method()
        {
            this._parameters = new ObservableCompositionOrderedSet<IParameter>(this);
            this._parameters.CollectionChanging += this.ParametersCollectionChanging;
            this._parameters.CollectionChanged += this.ParametersCollectionChanged;
        }
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAbstractChanging(e);
                    this.OnPropertyChanging("IsAbstract", e, _isAbstractAttribute);
                    this._isAbstract = value;
                    this.OnIsAbstractChanged(e);
                    this.OnPropertyChanged("IsAbstract", e, _isAbstractAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Parameters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IParameter> Parameters
        {
            get
            {
                return this._parameters;
            }
        }
        
        /// <summary>
        /// The ReturnType property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ITypeReference ReturnType
        {
            get
            {
                return this._returnType;
            }
            set
            {
                if ((this._returnType != value))
                {
                    ITypeReference old = this._returnType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReturnTypeChanging(e);
                    this.OnPropertyChanging("ReturnType", e, _returnTypeReference);
                    this._returnType = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetReturnType;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetReturnType;
                    }
                    this.OnReturnTypeChanged(e);
                    this.OnPropertyChanged("ReturnType", e, _returnTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The BodyExpression property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression BodyExpression
        {
            get
            {
                return this._bodyExpression;
            }
            set
            {
                if ((this._bodyExpression != value))
                {
                    IExpression old = this._bodyExpression;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBodyExpressionChanging(e);
                    this.OnPropertyChanging("BodyExpression", e, _bodyExpressionReference);
                    this._bodyExpression = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetBodyExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetBodyExpression;
                    }
                    this.OnBodyExpressionChanged(e);
                    this.OnPropertyChanged("BodyExpression", e, _bodyExpressionReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new MethodChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MethodReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Method" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsAbstract property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanging;
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired before the ReturnType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReturnTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReturnType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReturnTypeChanged;
        
        /// <summary>
        /// Gets fired before the BodyExpression property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BodyExpressionChanging;
        
        /// <summary>
        /// Gets fired when the BodyExpression property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BodyExpressionChanged;
        
        private static ITypedElement RetrieveIsAbstractAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Method.ClassInstance)).Resolve("IsAbstract")));
        }
        
        /// <summary>
        /// Raises the IsAbstractChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAbstractChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveParametersReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Method.ClassInstance)).Resolve("Parameters")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Parameters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParametersCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Parameters", e, _parametersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Parameters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParametersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Parameters", e, _parametersReference);
        }
        
        private static ITypedElement RetrieveReturnTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Method.ClassInstance)).Resolve("ReturnType")));
        }
        
        /// <summary>
        /// Raises the ReturnTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReturnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReturnTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReturnTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReturnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReturnTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReturnType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReturnType(object sender, System.EventArgs eventArgs)
        {
            this.ReturnType = null;
        }
        
        private static ITypedElement RetrieveBodyExpressionReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.SimpleCodeDOM.Method.ClassInstance)).Resolve("BodyExpression")));
        }
        
        /// <summary>
        /// Raises the BodyExpressionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBodyExpressionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BodyExpressionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BodyExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBodyExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BodyExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BodyExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBodyExpression(object sender, System.EventArgs eventArgs)
        {
            this.BodyExpression = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int parametersIndex = ModelHelper.IndexOfReference(this.Parameters, element);
            if ((parametersIndex != -1))
            {
                return ModelHelper.CreatePath("Parameters", parametersIndex);
            }
            if ((element == this.ReturnType))
            {
                return ModelHelper.CreatePath("ReturnType");
            }
            if ((element == this.BodyExpression))
            {
                return ModelHelper.CreatePath("BodyExpression");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PARAMETERS"))
            {
                if ((index < this.Parameters.Count))
                {
                    return this.Parameters[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "RETURNTYPE"))
            {
                return this.ReturnType;
            }
            if ((reference == "BODYEXPRESSION"))
            {
                return this.BodyExpression;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PARAMETERS"))
            {
                return this._parameters;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RETURNTYPE"))
            {
                this.ReturnType = ((ITypeReference)(value));
                return;
            }
            if ((feature == "BODYEXPRESSION"))
            {
                this.BodyExpression = ((IExpression)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ReturnType"))
            {
                return new ReturnTypeProxy(this);
            }
            if ((attribute == "BodyExpression"))
            {
                return new BodyExpressionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ReturnType"))
            {
                return new ReturnTypeProxy(this);
            }
            if ((reference == "BodyExpression"))
            {
                return new BodyExpressionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._parameters))
            {
                return "Parameters";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/SimpleCodeDOM#//Method" +
                        "")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Method class
        /// </summary>
        public class MethodChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Method _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MethodChildrenCollection(Method parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Parameters.Count);
                    if ((this._parent.ReturnType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BodyExpression != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Parameters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReturnTypeChanged += this.PropagateValueChanges;
                this._parent.BodyExpressionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Parameters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReturnTypeChanged -= this.PropagateValueChanges;
                this._parent.BodyExpressionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IParameter parametersCasted = item.As<IParameter>();
                if ((parametersCasted != null))
                {
                    this._parent.Parameters.Add(parametersCasted);
                }
                if ((this._parent.ReturnType == null))
                {
                    ITypeReference returnTypeCasted = item.As<ITypeReference>();
                    if ((returnTypeCasted != null))
                    {
                        this._parent.ReturnType = returnTypeCasted;
                        return;
                    }
                }
                if ((this._parent.BodyExpression == null))
                {
                    IExpression bodyExpressionCasted = item.As<IExpression>();
                    if ((bodyExpressionCasted != null))
                    {
                        this._parent.BodyExpression = bodyExpressionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Parameters.Clear();
                this._parent.ReturnType = null;
                this._parent.BodyExpression = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Parameters.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReturnType))
                {
                    return true;
                }
                if ((item == this._parent.BodyExpression))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> parametersEnumerator = this._parent.Parameters.GetEnumerator();
                try
                {
                    for (
                    ; parametersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parametersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parametersEnumerator.Dispose();
                }
                if ((this._parent.ReturnType != null))
                {
                    array[arrayIndex] = this._parent.ReturnType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BodyExpression != null))
                {
                    array[arrayIndex] = this._parent.BodyExpression;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IParameter parameterItem = item.As<IParameter>();
                if (((parameterItem != null) 
                            && this._parent.Parameters.Remove(parameterItem)))
                {
                    return true;
                }
                if ((this._parent.ReturnType == item))
                {
                    this._parent.ReturnType = null;
                    return true;
                }
                if ((this._parent.BodyExpression == item))
                {
                    this._parent.BodyExpression = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Parameters).Concat(this._parent.ReturnType).Concat(this._parent.BodyExpression).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Method class
        /// </summary>
        public class MethodReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Method _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MethodReferencedElementsCollection(Method parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Parameters.Count);
                    if ((this._parent.ReturnType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BodyExpression != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Parameters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReturnTypeChanged += this.PropagateValueChanges;
                this._parent.BodyExpressionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Parameters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReturnTypeChanged -= this.PropagateValueChanges;
                this._parent.BodyExpressionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IParameter parametersCasted = item.As<IParameter>();
                if ((parametersCasted != null))
                {
                    this._parent.Parameters.Add(parametersCasted);
                }
                if ((this._parent.ReturnType == null))
                {
                    ITypeReference returnTypeCasted = item.As<ITypeReference>();
                    if ((returnTypeCasted != null))
                    {
                        this._parent.ReturnType = returnTypeCasted;
                        return;
                    }
                }
                if ((this._parent.BodyExpression == null))
                {
                    IExpression bodyExpressionCasted = item.As<IExpression>();
                    if ((bodyExpressionCasted != null))
                    {
                        this._parent.BodyExpression = bodyExpressionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Parameters.Clear();
                this._parent.ReturnType = null;
                this._parent.BodyExpression = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Parameters.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReturnType))
                {
                    return true;
                }
                if ((item == this._parent.BodyExpression))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> parametersEnumerator = this._parent.Parameters.GetEnumerator();
                try
                {
                    for (
                    ; parametersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parametersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parametersEnumerator.Dispose();
                }
                if ((this._parent.ReturnType != null))
                {
                    array[arrayIndex] = this._parent.ReturnType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BodyExpression != null))
                {
                    array[arrayIndex] = this._parent.BodyExpression;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IParameter parameterItem = item.As<IParameter>();
                if (((parameterItem != null) 
                            && this._parent.Parameters.Remove(parameterItem)))
                {
                    return true;
                }
                if ((this._parent.ReturnType == item))
                {
                    this._parent.ReturnType = null;
                    return true;
                }
                if ((this._parent.BodyExpression == item))
                {
                    this._parent.BodyExpression = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Parameters).Concat(this._parent.ReturnType).Concat(this._parent.BodyExpression).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IMethod, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IMethod modelElement) : 
                    base(modelElement, "IsAbstract")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReturnType property
        /// </summary>
        private sealed class ReturnTypeProxy : ModelPropertyChange<IMethod, ITypeReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReturnTypeProxy(IMethod modelElement) : 
                    base(modelElement, "ReturnType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeReference Value
            {
                get
                {
                    return this.ModelElement.ReturnType;
                }
                set
                {
                    this.ModelElement.ReturnType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BodyExpression property
        /// </summary>
        private sealed class BodyExpressionProxy : ModelPropertyChange<IMethod, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BodyExpressionProxy(IMethod modelElement) : 
                    base(modelElement, "BodyExpression")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.BodyExpression;
                }
                set
                {
                    this.ModelElement.BodyExpression = value;
                }
            }
        }
    }
}


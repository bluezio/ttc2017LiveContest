//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.LiveContest.RefinementsEcore
{
    
    
    /// <summary>
    /// The default implementation of the EAttribute class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore")]
    [XmlNamespacePrefixAttribute("ecoreR")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//EAt" +
        "tribute")]
    [DebuggerDisplayAttribute("EAttribute {Name}")]
    public partial class EAttribute : EStructuralFeature, IEAttribute, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private Nullable<int> _iD;
        
        private static Lazy<ITypedElement> _iDAttribute = new Lazy<ITypedElement>(RetrieveIDAttribute);
        
        private static Lazy<ITypedElement> _refinesReference = new Lazy<ITypedElement>(RetrieveRefinesReference);
        
        /// <summary>
        /// The backing field for the Refines property
        /// </summary>
        private IEAttribute _refines;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The iD property
        /// </summary>
        [XmlElementNameAttribute("iD")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    Nullable<int> old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e, _iDAttribute);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e, _iDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Refines property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IEAttribute Refines
        {
            get
            {
                return this._refines;
            }
            set
            {
                if ((this._refines != value))
                {
                    IEAttribute old = this._refines;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRefinesChanging(e);
                    this.OnPropertyChanging("Refines", e, _refinesReference);
                    this._refines = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRefines;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRefines;
                    }
                    this.OnRefinesChanged(e);
                    this.OnPropertyChanged("Refines", e, _refinesReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EAttributeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//EAt" +
                            "tribute")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the Refines property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefinesChanging;
        
        /// <summary>
        /// Gets fired when the Refines property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefinesChanged;
        
        private static ITypedElement RetrieveIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.EAttribute.ClassInstance)).Resolve("iD")));
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRefinesReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.EAttribute.ClassInstance)).Resolve("Refines")));
        }
        
        /// <summary>
        /// Raises the RefinesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefinesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefinesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RefinesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefinesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefinesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Refines property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRefines(object sender, System.EventArgs eventArgs)
        {
            this.Refines = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REFINES"))
            {
                this.Refines = ((IEAttribute)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Refines"))
            {
                return new RefinesProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Refines"))
            {
                return new RefinesProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//EAt" +
                        "tribute")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EAttribute class
        /// </summary>
        public class EAttributeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EAttribute _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EAttributeReferencedElementsCollection(EAttribute parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Refines != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RefinesChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RefinesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Refines == null))
                {
                    IEAttribute refinesCasted = item.As<IEAttribute>();
                    if ((refinesCasted != null))
                    {
                        this._parent.Refines = refinesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Refines = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Refines))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Refines != null))
                {
                    array[arrayIndex] = this._parent.Refines;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Refines == item))
                {
                    this._parent.Refines = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Refines).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the iD property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IEAttribute, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IEAttribute modelElement) : 
                    base(modelElement, "iD")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Refines property
        /// </summary>
        private sealed class RefinesProxy : ModelPropertyChange<IEAttribute, IEAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefinesProxy(IEAttribute modelElement) : 
                    base(modelElement, "Refines")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEAttribute Value
            {
                get
                {
                    return this.ModelElement.Refines;
                }
                set
                {
                    this.ModelElement.Refines = value;
                }
            }
        }
    }
}


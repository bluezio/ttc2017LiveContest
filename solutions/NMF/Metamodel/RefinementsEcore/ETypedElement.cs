//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.LiveContest.RefinementsEcore
{
    
    
    /// <summary>
    /// The default implementation of the ETypedElement class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore")]
    [XmlNamespacePrefixAttribute("ecoreR")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//ETy" +
        "pedElement")]
    [DebuggerDisplayAttribute("ETypedElement {Name}")]
    public abstract partial class ETypedElement : ENamedElement, IETypedElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Ordered property
        /// </summary>
        private Nullable<bool> _ordered = true;
        
        private static Lazy<ITypedElement> _orderedAttribute = new Lazy<ITypedElement>(RetrieveOrderedAttribute);
        
        /// <summary>
        /// The backing field for the Unique property
        /// </summary>
        private Nullable<bool> _unique = true;
        
        private static Lazy<ITypedElement> _uniqueAttribute = new Lazy<ITypedElement>(RetrieveUniqueAttribute);
        
        /// <summary>
        /// The backing field for the LowerBound property
        /// </summary>
        private Nullable<int> _lowerBound;
        
        private static Lazy<ITypedElement> _lowerBoundAttribute = new Lazy<ITypedElement>(RetrieveLowerBoundAttribute);
        
        /// <summary>
        /// The backing field for the UpperBound property
        /// </summary>
        private Nullable<int> _upperBound = 1;
        
        private static Lazy<ITypedElement> _upperBoundAttribute = new Lazy<ITypedElement>(RetrieveUpperBoundAttribute);
        
        private static Lazy<ITypedElement> _eTypeReference = new Lazy<ITypedElement>(RetrieveETypeReference);
        
        /// <summary>
        /// The backing field for the EType property
        /// </summary>
        private IEClassifier _eType;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ordered property
        /// </summary>
        [DefaultValueAttribute(true)]
        [XmlElementNameAttribute("ordered")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Ordered
        {
            get
            {
                return this._ordered;
            }
            set
            {
                if ((this._ordered != value))
                {
                    Nullable<bool> old = this._ordered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOrderedChanging(e);
                    this.OnPropertyChanging("Ordered", e, _orderedAttribute);
                    this._ordered = value;
                    this.OnOrderedChanged(e);
                    this.OnPropertyChanged("Ordered", e, _orderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The unique property
        /// </summary>
        [DefaultValueAttribute(true)]
        [XmlElementNameAttribute("unique")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Unique
        {
            get
            {
                return this._unique;
            }
            set
            {
                if ((this._unique != value))
                {
                    Nullable<bool> old = this._unique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUniqueChanging(e);
                    this.OnPropertyChanging("Unique", e, _uniqueAttribute);
                    this._unique = value;
                    this.OnUniqueChanged(e);
                    this.OnPropertyChanged("Unique", e, _uniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lowerBound property
        /// </summary>
        [XmlElementNameAttribute("lowerBound")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> LowerBound
        {
            get
            {
                return this._lowerBound;
            }
            set
            {
                if ((this._lowerBound != value))
                {
                    Nullable<int> old = this._lowerBound;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerBoundChanging(e);
                    this.OnPropertyChanging("LowerBound", e, _lowerBoundAttribute);
                    this._lowerBound = value;
                    this.OnLowerBoundChanged(e);
                    this.OnPropertyChanged("LowerBound", e, _lowerBoundAttribute);
                }
            }
        }
        
        /// <summary>
        /// The upperBound property
        /// </summary>
        [DefaultValueAttribute(1)]
        [XmlElementNameAttribute("upperBound")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> UpperBound
        {
            get
            {
                return this._upperBound;
            }
            set
            {
                if ((this._upperBound != value))
                {
                    Nullable<int> old = this._upperBound;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpperBoundChanging(e);
                    this.OnPropertyChanging("UpperBound", e, _upperBoundAttribute);
                    this._upperBound = value;
                    this.OnUpperBoundChanged(e);
                    this.OnPropertyChanged("UpperBound", e, _upperBoundAttribute);
                }
            }
        }
        
        /// <summary>
        /// The eType property
        /// </summary>
        [XmlElementNameAttribute("eType")]
        [XmlAttributeAttribute(true)]
        public IEClassifier EType
        {
            get
            {
                return this._eType;
            }
            set
            {
                if ((this._eType != value))
                {
                    IEClassifier old = this._eType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnETypeChanging(e);
                    this.OnPropertyChanging("EType", e, _eTypeReference);
                    this._eType = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEType;
                    }
                    this.OnETypeChanged(e);
                    this.OnPropertyChanged("EType", e, _eTypeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ETypedElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//ETy" +
                            "pedElement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Ordered property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrderedChanging;
        
        /// <summary>
        /// Gets fired when the Ordered property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrderedChanged;
        
        /// <summary>
        /// Gets fired before the Unique property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UniqueChanging;
        
        /// <summary>
        /// Gets fired when the Unique property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UniqueChanged;
        
        /// <summary>
        /// Gets fired before the LowerBound property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerBoundChanging;
        
        /// <summary>
        /// Gets fired when the LowerBound property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerBoundChanged;
        
        /// <summary>
        /// Gets fired before the UpperBound property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperBoundChanging;
        
        /// <summary>
        /// Gets fired when the UpperBound property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperBoundChanged;
        
        /// <summary>
        /// Gets fired before the EType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ETypeChanging;
        
        /// <summary>
        /// Gets fired when the EType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ETypeChanged;
        
        private static ITypedElement RetrieveOrderedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.ETypedElement.ClassInstance)).Resolve("ordered")));
        }
        
        /// <summary>
        /// Raises the OrderedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrderedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrderedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrderedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUniqueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.ETypedElement.ClassInstance)).Resolve("unique")));
        }
        
        /// <summary>
        /// Raises the UniqueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUniqueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UniqueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUniqueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLowerBoundAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.ETypedElement.ClassInstance)).Resolve("lowerBound")));
        }
        
        /// <summary>
        /// Raises the LowerBoundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerBoundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUpperBoundAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.ETypedElement.ClassInstance)).Resolve("upperBound")));
        }
        
        /// <summary>
        /// Raises the UpperBoundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperBoundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveETypeReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.ETypedElement.ClassInstance)).Resolve("eType")));
        }
        
        /// <summary>
        /// Raises the ETypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnETypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ETypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ETypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnETypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ETypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEType(object sender, System.EventArgs eventArgs)
        {
            this.EType = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ORDERED"))
            {
                return this.Ordered;
            }
            if ((attribute == "UNIQUE"))
            {
                return this.Unique;
            }
            if ((attribute == "LOWERBOUND"))
            {
                return this.LowerBound;
            }
            if ((attribute == "UPPERBOUND"))
            {
                return this.UpperBound;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ETYPE"))
            {
                this.EType = ((IEClassifier)(value));
                return;
            }
            if ((feature == "ORDERED"))
            {
                this.Ordered = ((bool)(value));
                return;
            }
            if ((feature == "UNIQUE"))
            {
                this.Unique = ((bool)(value));
                return;
            }
            if ((feature == "LOWERBOUND"))
            {
                this.LowerBound = ((int)(value));
                return;
            }
            if ((feature == "UPPERBOUND"))
            {
                this.UpperBound = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EType"))
            {
                return new ETypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EType"))
            {
                return new ETypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//ETy" +
                        "pedElement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ETypedElement class
        /// </summary>
        public class ETypedElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ETypedElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ETypedElementReferencedElementsCollection(ETypedElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ETypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ETypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EType == null))
                {
                    IEClassifier eTypeCasted = item.As<IEClassifier>();
                    if ((eTypeCasted != null))
                    {
                        this._parent.EType = eTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EType != null))
                {
                    array[arrayIndex] = this._parent.EType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EType == item))
                {
                    this._parent.EType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ordered property
        /// </summary>
        private sealed class OrderedProxy : ModelPropertyChange<IETypedElement, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrderedProxy(IETypedElement modelElement) : 
                    base(modelElement, "ordered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Ordered;
                }
                set
                {
                    this.ModelElement.Ordered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unique property
        /// </summary>
        private sealed class UniqueProxy : ModelPropertyChange<IETypedElement, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UniqueProxy(IETypedElement modelElement) : 
                    base(modelElement, "unique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Unique;
                }
                set
                {
                    this.ModelElement.Unique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerBound property
        /// </summary>
        private sealed class LowerBoundProxy : ModelPropertyChange<IETypedElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerBoundProxy(IETypedElement modelElement) : 
                    base(modelElement, "lowerBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LowerBound;
                }
                set
                {
                    this.ModelElement.LowerBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upperBound property
        /// </summary>
        private sealed class UpperBoundProxy : ModelPropertyChange<IETypedElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperBoundProxy(IETypedElement modelElement) : 
                    base(modelElement, "upperBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.UpperBound;
                }
                set
                {
                    this.ModelElement.UpperBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eType property
        /// </summary>
        private sealed class ETypeProxy : ModelPropertyChange<IETypedElement, IEClassifier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ETypeProxy(IETypedElement modelElement) : 
                    base(modelElement, "eType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEClassifier Value
            {
                get
                {
                    return this.ModelElement.EType;
                }
                set
                {
                    this.ModelElement.EType = value;
                }
            }
        }
    }
}


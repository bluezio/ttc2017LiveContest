//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.LiveContest.RefinementsEcore
{
    
    
    /// <summary>
    /// The default implementation of the EPackage class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore")]
    [XmlNamespacePrefixAttribute("ecoreR")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//EPa" +
        "ckage")]
    [DebuggerDisplayAttribute("EPackage {Name}")]
    public partial class EPackage : ENamedElement, IEPackage, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NsURI property
        /// </summary>
        private string _nsURI;
        
        private static Lazy<ITypedElement> _nsURIAttribute = new Lazy<ITypedElement>(RetrieveNsURIAttribute);
        
        /// <summary>
        /// The backing field for the NsPrefix property
        /// </summary>
        private string _nsPrefix;
        
        private static Lazy<ITypedElement> _nsPrefixAttribute = new Lazy<ITypedElement>(RetrieveNsPrefixAttribute);
        
        private static Lazy<ITypedElement> _eClassifiersReference = new Lazy<ITypedElement>(RetrieveEClassifiersReference);
        
        /// <summary>
        /// The backing field for the EClassifiers property
        /// </summary>
        private EPackageEClassifiersCollection _eClassifiers;
        
        private static Lazy<ITypedElement> _eSubpackagesReference = new Lazy<ITypedElement>(RetrieveESubpackagesReference);
        
        /// <summary>
        /// The backing field for the ESubpackages property
        /// </summary>
        private EPackageESubpackagesCollection _eSubpackages;
        
        private static Lazy<ITypedElement> _eSuperPackageReference = new Lazy<ITypedElement>(RetrieveESuperPackageReference);
        
        private static IClass _classInstance;
        
        public EPackage()
        {
            this._eClassifiers = new EPackageEClassifiersCollection(this);
            this._eClassifiers.CollectionChanging += this.EClassifiersCollectionChanging;
            this._eClassifiers.CollectionChanged += this.EClassifiersCollectionChanged;
            this._eSubpackages = new EPackageESubpackagesCollection(this);
            this._eSubpackages.CollectionChanging += this.ESubpackagesCollectionChanging;
            this._eSubpackages.CollectionChanged += this.ESubpackagesCollectionChanged;
        }
        
        /// <summary>
        /// The nsURI property
        /// </summary>
        [XmlElementNameAttribute("nsURI")]
        [XmlAttributeAttribute(true)]
        public string NsURI
        {
            get
            {
                return this._nsURI;
            }
            set
            {
                if ((this._nsURI != value))
                {
                    string old = this._nsURI;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNsURIChanging(e);
                    this.OnPropertyChanging("NsURI", e, _nsURIAttribute);
                    this._nsURI = value;
                    this.OnNsURIChanged(e);
                    this.OnPropertyChanged("NsURI", e, _nsURIAttribute);
                }
            }
        }
        
        /// <summary>
        /// The nsPrefix property
        /// </summary>
        [XmlElementNameAttribute("nsPrefix")]
        [XmlAttributeAttribute(true)]
        public string NsPrefix
        {
            get
            {
                return this._nsPrefix;
            }
            set
            {
                if ((this._nsPrefix != value))
                {
                    string old = this._nsPrefix;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNsPrefixChanging(e);
                    this.OnPropertyChanging("NsPrefix", e, _nsPrefixAttribute);
                    this._nsPrefix = value;
                    this.OnNsPrefixChanged(e);
                    this.OnPropertyChanged("NsPrefix", e, _nsPrefixAttribute);
                }
            }
        }
        
        /// <summary>
        /// The eClassifiers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eClassifiers")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("ePackage")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IEClassifier> EClassifiers
        {
            get
            {
                return this._eClassifiers;
            }
        }
        
        /// <summary>
        /// The eSubpackages property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eSubpackages")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("eSuperPackage")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IEPackage> ESubpackages
        {
            get
            {
                return this._eSubpackages;
            }
        }
        
        /// <summary>
        /// The eSuperPackage property
        /// </summary>
        [XmlElementNameAttribute("eSuperPackage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("eSubpackages")]
        public IEPackage ESuperPackage
        {
            get
            {
                return ModelHelper.CastAs<IEPackage>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new EPackageChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EPackageReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//EPa" +
                            "ckage")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NsURI property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NsURIChanging;
        
        /// <summary>
        /// Gets fired when the NsURI property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NsURIChanged;
        
        /// <summary>
        /// Gets fired before the NsPrefix property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NsPrefixChanging;
        
        /// <summary>
        /// Gets fired when the NsPrefix property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NsPrefixChanged;
        
        /// <summary>
        /// Gets fired before the ESuperPackage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ESuperPackageChanging;
        
        /// <summary>
        /// Gets fired when the ESuperPackage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ESuperPackageChanged;
        
        private static ITypedElement RetrieveNsURIAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.EPackage.ClassInstance)).Resolve("nsURI")));
        }
        
        /// <summary>
        /// Raises the NsURIChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNsURIChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NsURIChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NsURIChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNsURIChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NsURIChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNsPrefixAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.EPackage.ClassInstance)).Resolve("nsPrefix")));
        }
        
        /// <summary>
        /// Raises the NsPrefixChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNsPrefixChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NsPrefixChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NsPrefixChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNsPrefixChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NsPrefixChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEClassifiersReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.EPackage.ClassInstance)).Resolve("eClassifiers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EClassifiers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EClassifiersCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EClassifiers", e, _eClassifiersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EClassifiers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EClassifiersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EClassifiers", e, _eClassifiersReference);
        }
        
        private static ITypedElement RetrieveESubpackagesReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.EPackage.ClassInstance)).Resolve("eSubpackages")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ESubpackages property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ESubpackagesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ESubpackages", e, _eSubpackagesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ESubpackages property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ESubpackagesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ESubpackages", e, _eSubpackagesReference);
        }
        
        private static ITypedElement RetrieveESuperPackageReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.LiveContest.RefinementsEcore.EPackage.ClassInstance)).Resolve("eSuperPackage")));
        }
        
        /// <summary>
        /// Raises the ESuperPackageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnESuperPackageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ESuperPackageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IEPackage oldESuperPackage = ModelHelper.CastAs<IEPackage>(oldParent);
            IEPackage newESuperPackage = ModelHelper.CastAs<IEPackage>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldESuperPackage, newESuperPackage);
            this.OnESuperPackageChanging(e);
            this.OnPropertyChanging("ESuperPackage", e, _eSuperPackageReference);
        }
        
        /// <summary>
        /// Raises the ESuperPackageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnESuperPackageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ESuperPackageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IEPackage oldESuperPackage = ModelHelper.CastAs<IEPackage>(oldParent);
            IEPackage newESuperPackage = ModelHelper.CastAs<IEPackage>(newParent);
            if ((oldESuperPackage != null))
            {
                oldESuperPackage.ESubpackages.Remove(this);
            }
            if ((newESuperPackage != null))
            {
                newESuperPackage.ESubpackages.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldESuperPackage, newESuperPackage);
            this.OnESuperPackageChanged(e);
            this.OnPropertyChanged("ESuperPackage", e, _eSuperPackageReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int eClassifiersIndex = ModelHelper.IndexOfReference(this.EClassifiers, element);
            if ((eClassifiersIndex != -1))
            {
                return ModelHelper.CreatePath("eClassifiers", eClassifiersIndex);
            }
            int eSubpackagesIndex = ModelHelper.IndexOfReference(this.ESubpackages, element);
            if ((eSubpackagesIndex != -1))
            {
                return ModelHelper.CreatePath("eSubpackages", eSubpackagesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ECLASSIFIERS"))
            {
                if ((index < this.EClassifiers.Count))
                {
                    return this.EClassifiers[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ESUBPACKAGES"))
            {
                if ((index < this.ESubpackages.Count))
                {
                    return this.ESubpackages[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NSURI"))
            {
                return this.NsURI;
            }
            if ((attribute == "NSPREFIX"))
            {
                return this.NsPrefix;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ECLASSIFIERS"))
            {
                return this._eClassifiers;
            }
            if ((feature == "ESUBPACKAGES"))
            {
                return this._eSubpackages;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ESUPERPACKAGE"))
            {
                this.ESuperPackage = ((IEPackage)(value));
                return;
            }
            if ((feature == "NSURI"))
            {
                this.NsURI = ((string)(value));
                return;
            }
            if ((feature == "NSPREFIX"))
            {
                this.NsPrefix = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ESuperPackage"))
            {
                return new ESuperPackageProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ESuperPackage"))
            {
                return new ESuperPackageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._eClassifiers))
            {
                return "eClassifiers";
            }
            if ((container == this._eSubpackages))
            {
                return "eSubpackages";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/LiveContest/RefinementsEcore#//EPa" +
                        "ckage")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EPackage class
        /// </summary>
        public class EPackageChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EPackage _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EPackageChildrenCollection(EPackage parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.EClassifiers.Count);
                    count = (count + this._parent.ESubpackages.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EClassifiers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ESubpackages.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EClassifiers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ESubpackages.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEClassifier eClassifiersCasted = item.As<IEClassifier>();
                if ((eClassifiersCasted != null))
                {
                    this._parent.EClassifiers.Add(eClassifiersCasted);
                }
                IEPackage eSubpackagesCasted = item.As<IEPackage>();
                if ((eSubpackagesCasted != null))
                {
                    this._parent.ESubpackages.Add(eSubpackagesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EClassifiers.Clear();
                this._parent.ESubpackages.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.EClassifiers.Contains(item))
                {
                    return true;
                }
                if (this._parent.ESubpackages.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> eClassifiersEnumerator = this._parent.EClassifiers.GetEnumerator();
                try
                {
                    for (
                    ; eClassifiersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eClassifiersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eClassifiersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eSubpackagesEnumerator = this._parent.ESubpackages.GetEnumerator();
                try
                {
                    for (
                    ; eSubpackagesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eSubpackagesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eSubpackagesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEClassifier eClassifierItem = item.As<IEClassifier>();
                if (((eClassifierItem != null) 
                            && this._parent.EClassifiers.Remove(eClassifierItem)))
                {
                    return true;
                }
                IEPackage ePackageItem = item.As<IEPackage>();
                if (((ePackageItem != null) 
                            && this._parent.ESubpackages.Remove(ePackageItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EClassifiers).Concat(this._parent.ESubpackages).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EPackage class
        /// </summary>
        public class EPackageReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EPackage _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EPackageReferencedElementsCollection(EPackage parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.EClassifiers.Count);
                    count = (count + this._parent.ESubpackages.Count);
                    if ((this._parent.ESuperPackage != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EClassifiers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ESubpackages.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ESuperPackageChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EClassifiers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ESubpackages.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ESuperPackageChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEClassifier eClassifiersCasted = item.As<IEClassifier>();
                if ((eClassifiersCasted != null))
                {
                    this._parent.EClassifiers.Add(eClassifiersCasted);
                }
                IEPackage eSubpackagesCasted = item.As<IEPackage>();
                if ((eSubpackagesCasted != null))
                {
                    this._parent.ESubpackages.Add(eSubpackagesCasted);
                }
                if ((this._parent.ESuperPackage == null))
                {
                    IEPackage eSuperPackageCasted = item.As<IEPackage>();
                    if ((eSuperPackageCasted != null))
                    {
                        this._parent.ESuperPackage = eSuperPackageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EClassifiers.Clear();
                this._parent.ESubpackages.Clear();
                this._parent.ESuperPackage = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.EClassifiers.Contains(item))
                {
                    return true;
                }
                if (this._parent.ESubpackages.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ESuperPackage))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> eClassifiersEnumerator = this._parent.EClassifiers.GetEnumerator();
                try
                {
                    for (
                    ; eClassifiersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eClassifiersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eClassifiersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eSubpackagesEnumerator = this._parent.ESubpackages.GetEnumerator();
                try
                {
                    for (
                    ; eSubpackagesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eSubpackagesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eSubpackagesEnumerator.Dispose();
                }
                if ((this._parent.ESuperPackage != null))
                {
                    array[arrayIndex] = this._parent.ESuperPackage;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEClassifier eClassifierItem = item.As<IEClassifier>();
                if (((eClassifierItem != null) 
                            && this._parent.EClassifiers.Remove(eClassifierItem)))
                {
                    return true;
                }
                IEPackage ePackageItem = item.As<IEPackage>();
                if (((ePackageItem != null) 
                            && this._parent.ESubpackages.Remove(ePackageItem)))
                {
                    return true;
                }
                if ((this._parent.ESuperPackage == item))
                {
                    this._parent.ESuperPackage = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EClassifiers).Concat(this._parent.ESubpackages).Concat(this._parent.ESuperPackage).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nsURI property
        /// </summary>
        private sealed class NsURIProxy : ModelPropertyChange<IEPackage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NsURIProxy(IEPackage modelElement) : 
                    base(modelElement, "nsURI")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.NsURI;
                }
                set
                {
                    this.ModelElement.NsURI = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nsPrefix property
        /// </summary>
        private sealed class NsPrefixProxy : ModelPropertyChange<IEPackage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NsPrefixProxy(IEPackage modelElement) : 
                    base(modelElement, "nsPrefix")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.NsPrefix;
                }
                set
                {
                    this.ModelElement.NsPrefix = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eSuperPackage property
        /// </summary>
        private sealed class ESuperPackageProxy : ModelPropertyChange<IEPackage, IEPackage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ESuperPackageProxy(IEPackage modelElement) : 
                    base(modelElement, "eSuperPackage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEPackage Value
            {
                get
                {
                    return this.ModelElement.ESuperPackage;
                }
                set
                {
                    this.ModelElement.ESuperPackage = value;
                }
            }
        }
    }
}

